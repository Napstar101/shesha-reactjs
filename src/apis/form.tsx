/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface FormDto {
  id?: string;
  path?: string | null;
  name?: string | null;
  description?: string | null;
  markup?: string | null;
  modelType?: string | null;
  type?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface FormDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface FormUpdateMarkupInput {
  id?: string;
  markup?: string | null;
}

export interface AutocompleteItemDto {
  value?: string | null;
  displayText?: string | null;
}

export interface AutocompleteItemDtoListAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: AutocompleteItemDto[] | null;
}

export interface FormGetQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export interface FormGetPathParams {
  id: string;
}

export type FormGetProps = Omit<
  GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, FormGetPathParams>,
  'path'
> &
  FormGetPathParams;

export const FormGet = ({ id, ...props }: FormGetProps) => (
  <Get<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, FormGetPathParams>
    path={`/api/services/Forms/${id}`}
    {...props}
  />
);

export type UseFormGetProps = Omit<
  UseGetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, FormGetPathParams>,
  'path'
> &
  FormGetPathParams;

export const useFormGet = ({ id, ...props }: UseFormGetProps) =>
  useGet<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, FormGetPathParams>(
    (paramsInPath: FormGetPathParams) => `/api/services/Forms/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export type formGetProps = Omit<
  RestfulShesha.GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, FormGetPathParams> & { id: string },
  'queryParams'
>;
export const formGet = (queryParams: FormGetQueryParams, { id, ...props }: formGetProps) =>
  RestfulShesha.get<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, FormGetPathParams>(
    `/api/services/Forms/${id}`,
    queryParams,
    props
  );

export interface FormGetByPathQueryParams {
  path?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormGetByPathProps = Omit<
  GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>,
  'path'
>;

export const FormGetByPath = (props: FormGetByPathProps) => (
  <Get<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void> path={`/api/services/Forms`} {...props} />
);

export type UseFormGetByPathProps = Omit<
  UseGetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>,
  'path'
>;

export const useFormGetByPath = (props: UseFormGetByPathProps) =>
  useGet<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>(`/api/services/Forms`, props);

export type formGetByPathProps = Omit<
  RestfulShesha.GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>,
  'queryParams'
>;
export const formGetByPath = (queryParams: FormGetByPathQueryParams, props: formGetByPathProps) =>
  RestfulShesha.get<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>(
    `/api/services/Forms`,
    queryParams,
    props
  );

export interface FormUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormUpdateProps = Omit<
  MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const FormUpdate = (props: FormUpdateProps) => (
  <Mutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>
    verb="PUT"
    path={`/api/services/Forms`}
    {...props}
  />
);

export type UseFormUpdateProps = Omit<
  UseMutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const useFormUpdate = (props: UseFormUpdateProps) =>
  useMutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>(
    'PUT',
    `/api/services/Forms`,
    props
  );

export type formUpdateProps = Omit<
  RestfulShesha.MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>,
  'data'
>;
export const formUpdate = (data: FormDto, props: formUpdateProps) =>
  RestfulShesha.mutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>(
    'PUT',
    `/api/services/Forms`,
    data,
    props
  );

export interface FormCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormCreateProps = Omit<
  MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const FormCreate = (props: FormCreateProps) => (
  <Mutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>
    verb="POST"
    path={`/api/services/Forms`}
    {...props}
  />
);

export type UseFormCreateProps = Omit<
  UseMutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const useFormCreate = (props: UseFormCreateProps) =>
  useMutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>(
    'POST',
    `/api/services/Forms`,
    props
  );

export type formCreateProps = Omit<
  RestfulShesha.MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>,
  'data'
>;
export const formCreate = (data: FormDto, props: formCreateProps) =>
  RestfulShesha.mutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>(
    'POST',
    `/api/services/Forms`,
    data,
    props
  );

export interface FormUpdateMarkupQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export interface FormUpdateMarkupPathParams {
  id: string;
}

export type FormUpdateMarkupProps = Omit<
  MutateProps<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, FormUpdateMarkupPathParams>,
  'path' | 'verb'
> &
  FormUpdateMarkupPathParams;

export const FormUpdateMarkup = ({ id, ...props }: FormUpdateMarkupProps) => (
  <Mutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, FormUpdateMarkupPathParams>
    verb="PUT"
    path={`/api/services/Forms/${id}/Markup`}
    {...props}
  />
);

export type UseFormUpdateMarkupProps = Omit<
  UseMutateProps<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, FormUpdateMarkupPathParams>,
  'path' | 'verb'
> &
  FormUpdateMarkupPathParams;

export const useFormUpdateMarkup = ({ id, ...props }: UseFormUpdateMarkupProps) =>
  useMutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, FormUpdateMarkupPathParams>(
    'PUT',
    (paramsInPath: FormUpdateMarkupPathParams) => `/api/services/Forms/${paramsInPath.id}/Markup`,
    { pathParams: { id }, ...props }
  );

export type formUpdateMarkupProps = Omit<
  RestfulShesha.MutateProps<
    void,
    unknown,
    FormUpdateMarkupQueryParams,
    FormUpdateMarkupInput,
    FormUpdateMarkupPathParams
  > & { id: string },
  'data'
>;
export const formUpdateMarkup = (data: FormUpdateMarkupInput, { id, ...props }: formUpdateMarkupProps) =>
  RestfulShesha.mutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, FormUpdateMarkupPathParams>(
    'PUT',
    `/api/services/Forms/${id}/Markup`,
    data,
    props
  );

export interface FormAutocompleteQueryParams {
  term?: string | null;
  selectedValue?: string | null;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormAutocompleteProps = Omit<
  GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormAutocompleteQueryParams, void>,
  'path'
>;

export const FormAutocomplete = (props: FormAutocompleteProps) => (
  <Get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormAutocompleteQueryParams, void>
    path={`/api/services/Forms/autocomplete`}
    {...props}
  />
);

export type UseFormAutocompleteProps = Omit<
  UseGetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormAutocompleteQueryParams, void>,
  'path'
>;

export const useFormAutocomplete = (props: UseFormAutocompleteProps) =>
  useGet<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormAutocompleteQueryParams, void>(
    `/api/services/Forms/autocomplete`,
    props
  );

export type formAutocompleteProps = Omit<
  RestfulShesha.GetProps<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormAutocompleteQueryParams, void>,
  'queryParams'
>;
export const formAutocomplete = (queryParams: FormAutocompleteQueryParams, props: formAutocompleteProps) =>
  RestfulShesha.get<AutocompleteItemDtoListAjaxResponse, AjaxResponseBase, FormAutocompleteQueryParams, void>(
    `/api/services/Forms/autocomplete`,
    queryParams,
    props
  );
